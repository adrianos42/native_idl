library idl_types

enum Types {
    NativeInt,
    NativeFloat,
    NativeString,
    NativeBytes,
    NativeBool,
    NativeNone,
}

factory LanguageServerFact {
    create_with_options: () -> LanguageServer,
    create_multiple: () -> LanguageServer[],
    create_nicely: (name: string) -> [LanguageServer; int],
    create_with_option: [LanguageServer],
    create_return_option: (name: bytes) -> [LanguageServer],
}

interface LanguageServer {
    add_nodes: (nodes: TypeNode[]),
    finalize: (),
    as_string: [string; float],
    wer: int,           
}

type TypeNode {
    LibraryName: string,
    Imports: string[],
    Comment: string,
    InterfaceComment: string,
    StructComment: string,
    EnumComment: string,
    ConstComment: string,
    FactoryComment: string,
    StreamComment: string,
    TypeListComment: string,
    TypeStruct: TypeStruct,
    TypeStream: TypeStream,
    TypeFactory: TypeFactory,
    TypeEnum: TypeEnum,
    TypeList: TypeList,
    TypeConst: TypeConst,
    TypeInterface: TypeInterface,
}

struct TypeFactory {
    ident: string,
    fields: FactoryNode[],
}

type FactoryNode {
    FactoryField: FactoryField,
    Comment: string,
}

struct FactoryField {
    attributes: Attributes[],
    ident: string,
    ty: TypeName,
}

struct TypeInterface {
    ident: string,
    fields: InterfaceNode[],
}

type InterfaceNode {
    InterfaceField: InterfaceField,
    Comment: string,
}

struct InterfaceField {
    attributes: Attributes[],
    ident: string,
    ty: TypeName,
}

struct TypeStruct {
    ident: string,
    fields: StructNode[],
}

type StructNode {
    StructField: StructField,
    Comment: string,
}

struct StructField {
    ident: string,
    ty: TypeName,
}

struct TypeStream {
    ident: string,
    fields: StreamNode[],
}

type StreamNode {
    StreamField: StreamField,
    Comment: string,
}

struct StreamField {
    ident: string,
    ty: TypeName,
}

struct TypeList {
    ident: string,
    ty_list: TypeListNode[],
}

type TypeListNode {
    TypeListField: TypeListField,
    Comment: string,
}

struct TypeListField {
    ident: string,
    ty: TypeName,
}

struct TypeEnum {
    ident: string,
    fields: EnumNode[],
}

type EnumNode {
    EnumField: EnumField,
    Comment: string,
}

struct EnumField {
    ident: string,
}

struct TypeConst {
    ident: string,
    fields: ConstNode[],
    const_type: ConstTypes,
}

enum ConstTypes {
    NativeInt,
    NativeFloat,
    NativeString,
}

type ConstNode {
    ConstField: ConstField,
    Comment: string,
}

struct ConstField {
    ident: string,
    value: string,
}

struct Attributes {
    field: AttributeNode[],
}

type AttributeNode {
    Name: AttributeNames,
    UnknownName: string,
    StringField: string,
}

enum AttributeNames {
    DeprecatedName,
}

type TypeName {
    Types: Types,
    TypeFunction: TypeFunction,
    TypeTuple: TypeTuple,
    TypeArray: TypeArray,
    TypeMap: TypeMap,
    TypeOption: TypeOption,
    TypeResult: TypeResult,
    ListTypeName: string,
    EnumTypeName: string,
    StructTypeName: string,
    InterfaceTypeName: string,
    ConstTypeName: string,
    FactoryTypeName: string,
    StreamTypeName: string,
}

struct TypeFunction {
    args: TypeName,
    return_ty: TypeName,
}

struct TypeArray {
    ty: TypeName,
}

struct TypeMap {
    map_ty: TypeName,
    index_ty: TypeName,
}

struct TypeTuple {
    ty_list: TupleEntry[],
}

struct TupleEntry {
    ident: string,
    ty: TypeName,
}

struct TypeResult {
    ok_ty: TypeName,
    err_ty: TypeName,
}

struct TypeOption {
    some_ty: TypeName,
}