library idl_types

-- name: (non: string, neh: TypeStruct) -> [int],
-- idl_types: Types[],
-- nodes: TypeNode[],
-- with_args: (meh: int, hes: bool),
-- ty_maps: (rew: float) -> TypeInterface[string],
-- opns: [string],
-- results: [bytes; bool],

interface IdlInterface {
    shit: stream int,
    get_value: (value: TypeStruct, name: string[], meh_not: float) -> stream TypeNode,
    get_name: (name: string) -> int,
}

enum Types {
    NatInt,
    NatFloat,
    NatString,
    NatBytes,
    NatBool,
    NatNone,
}

type TypeNode {
    LibraryName: string,
    Imports: string[],
    Comment: string[],
    InterfaceComment: string[],
    StructComment: string[],
    EnumComment: string[],
    ConstComment: string[],
    StreamComment: string[],
    TypeListComment: string[],
    TypeStruct: TypeStruct,
    TypeStream: TypeStream,
    TypeEnum: TypeEnum,
    TypeList: TypeList,
    TypeConst: TypeConst,
    TypeInterface: TypeInterface,
}

struct TypeInterface {
    ident: string,
    fields: InterfaceNode[],
}

type InterfaceNode {
    InterfaceField: InterfaceField,
    Comment: string[],
}

struct InterfaceField {
    attributes: Attributes[],
    ident: string,
    ty: TypeName,
}

struct TypeStruct {
    ident: string,
    fields: StructNode[],
}

type StructNode {
    StructField: StructField,
    Comment: string[],
}

struct StructField {
    ident: string,
    ty: TypeName,
}

struct TypeStream {
    ident: string,
    fields: StreamNode[],
}

type StreamNode {
    StreamField: StreamField,
    Comment: string[],
}

struct StreamField {
    ident: string,
    ty: TypeName,
}

struct TypeList {
    ident: string,
    fields: TypeListNode[],
}

type TypeListNode {
    TypeListField: TypeListField,
    Comment: string[],
}

struct TypeListField {
    ident: string,
    ty: TypeName,
}

struct TypeEnum {
    ident: string,
    fields: EnumNode[],
}

type EnumNode {
    EnumField: EnumField,
    Comment: string[],
}

struct EnumField {
    ident: string,
}

struct TypeConst {
    ident: string,
    fields: ConstNode[],
    const_type: ConstTypes,
}

enum ConstTypes {
    NatInt,
    NatFloat,
    NatString,
}

type ConstNode {
    ConstField: ConstField,
    Comment: string[],
}

struct ConstField {
    ident: string,
    value: string,
}

struct Attributes {
    field: AttributeNode[],
}

type AttributeNode {
    Name: AttributeNames,
    UnknownName: string,
    StringField: string,
}

enum AttributeNames {
    DeprecatedName,
}

type TypeName {
    Types: Types,
    TypeFunction: TypeFunction,
    TypeTuple: TypeTuple,
    TypeArray: TypeArray,
    TypeMap: TypeMap,
    TypeOption: TypeOption,
    TypeResult: TypeResult,
    ListTypeName: string,
    EnumTypeName: string,
    StructTypeName: string,
    InterfaceTypeName: string,
    ConstTypeName: string,
    StreamTypeName: string,
}

struct TypeFunction {
    args: TypeName,
    return_ty: TypeName,
}

struct TypeArray {
    ty: TypeName,
}

struct TypeMap {
    map_ty: TypeName,
    index_ty: TypeName,
}

struct TypeTuple {
    fields: TupleEntry[],
}

struct TupleEntry {
    ident: string,
    ty: TypeName,
}

struct TypeResult {
    ok_ty: TypeName,
    err_ty: TypeName,
}

struct TypeOption {
    some_ty: TypeName,
}